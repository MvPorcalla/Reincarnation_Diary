// story.js

Great question! Let’s clearly summarize **what each of these functions does** in plain terms:

---

### ✅ 1. `getScene(sceneName)`

**Purpose:**
Safely retrieves a scene from the story.

**What it does:**

* Looks up the scene by its ID (like `"start"` or `"templeVictory"`).
* If the scene doesn't exist, it returns a fallback — usually `'gameOver'`.

**Think of it as:**

> “Get me the scene with this name. If it doesn’t exist, give me a default one so the game doesn’t break.”

---

### ✅ 2. `setScene(sceneName, player, params = {})`

**Purpose:**
Changes the current scene in the game and runs any logic tied to entering that scene.

**What it does:**

* Sets `story.currentScene` to the new scene name.
* Retrieves the scene using `getScene()`.
* If the scene has an `onEnter()` function, it runs it — this is where scene-specific setup happens (like healing, spawning enemies, etc).

**Think of it as:**

> “Change to this new scene and prepare it — run whatever setup it needs.”

---

### ✅ 3. `updateScene(sceneName, updates)`

**Purpose:**
Updates an existing scene’s text or choices dynamically while the game is running.

**What it does:**

* Looks up the scene by ID.
* Merges in any updates you provide (like changing `text` or adding/removing `choices`).

**Think of it as:**

> “Modify this scene’s content (like its description or options) on the fly.”

---

### ✅ 4. `onChoiceSelected(choice, player)`

**Purpose:**
Handles what happens when the player clicks a button/choice in the UI.

**What it does:**

* Checks if the choice says to redirect to another page (`redirectTo`).
* If not, it checks if the choice points to another scene (`nextScene`) and navigates to it.
* If it has extra data (`params`), it sends that to the scene.

**Think of it as:**

> “The player clicked something — now go to the appropriate scene or URL.”

---

### 🔁 How they all connect:

When the player clicks a choice →
`onChoiceSelected()` runs →
It calls `setScene()` →
That fetches the scene via `getScene()` →
Then it runs `onEnter()` if available →
Optionally, scenes are modified with `updateScene()`.

---

If you’d like, I can give you a **diagram** of how these functions interact during gameplay.
